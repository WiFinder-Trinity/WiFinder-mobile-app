/**
* Wifinder REST APIs
* This page lists all the rest APIs for Wifinder App.
*
* OpenAPI spec version: 0.0.1-SNAPSHOT
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package fr.wifinder.wifinderandroid.apis

import fr.wifinder.wifinderandroid.activities.HotspotsListActivity
import fr.wifinder.wifinderandroid.infrastructure.*
import fr.wifinder.wifinderandroid.models.ConnectionInput
import fr.wifinder.wifinderandroid.models.FindInput
import fr.wifinder.wifinderandroid.models.FindOutput

class CrowdsensingControllerApi(basePath: String = "http://35.180.192.129:8080", activity: HotspotsListActivity) : ApiClient(basePath, activity) {
    // TODO: Adapt the IP address of the server to the situation (phone, emulator...)
    /**
    * connect
    * 
    * @param input input 
    * @return void
    */
    fun connectUsingPOST(input: ConnectionInput) : Unit {
        val localVariableBody: kotlin.Any? = input
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/connect",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any?>(
            localVariableConfig,
            localVariableBody
        )

        return

//        return when (response.responseType) {
//            ResponseType.Success -> Unit
//            ResponseType.Informational -> TODO()
//            ResponseType.Redirection -> TODO()
//            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
//            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
//            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
//        }
    }

    /**
    * disconnect
    * 
    * @param input input 
    * @return void
    */
    fun disconnectUsingPOST(input: ConnectionInput) : Unit {
        val localVariableBody: kotlin.Any? = input
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/disconnect",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any?>(
            localVariableConfig,
            localVariableBody
        )

        return

//        return when (response.responseType) {
//            ResponseType.Success -> Unit
//            ResponseType.Informational -> TODO()
//            ResponseType.Redirection -> TODO()
//            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
//            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
//            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
//        }
    }

    /**
    * find
    * 
    * @param input input 
    * @return FindOutput
    */
    @Suppress("UNCHECKED_CAST")
    fun findUsingPOST(input: FindInput) : FindOutput? {
        val localVariableBody: kotlin.Any? = input
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/find",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<FindOutput>(
            localVariableConfig,
            localVariableBody
        )
        return null
//        return when (response.responseType) {
//            ResponseType.Success -> (response as Success<*>).data as FindOutput
//            ResponseType.Informational -> TODO()
//            ResponseType.Redirection -> TODO()
//            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
//            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
//            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
//        }
    }

    /**
    * test
    * 
    * @param text text 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun testUsingGET(text: kotlin.String) : kotlin.String? {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/test/{text}".replace("{"+"text"+"}", "$text"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return null

//        return when (response.responseType) {
//            ResponseType.Success -> (response as Success<*>).data as kotlin.String
//            ResponseType.Informational -> TODO()
//            ResponseType.Redirection -> TODO()
//            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
//            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
//            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
//        }
    }

}
